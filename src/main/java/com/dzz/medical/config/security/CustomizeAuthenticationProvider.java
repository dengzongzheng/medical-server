package com.dzz.medical.config.security;import com.dzz.medical.service.UserService;import com.google.common.base.Strings;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.stereotype.Component;/** * 自定义用户认证处理 * @author dzz * @since  2017年06月19 下午5:23 * @version  1.0.0 */@Componentpublic class CustomizeAuthenticationProvider implements AuthenticationProvider {    private UserService userService;    private CustomizeUserDetailsServiceImpl userDetailsService;    @Autowired    public void setUserService(UserService userService) {        this.userService = userService;    }    @Autowired    public void setUserDetailsService(CustomizeUserDetailsServiceImpl userDetailsService) {        this.userDetailsService = userDetailsService;    }    @Override    public Authentication authenticate(Authentication authentication) throws AuthenticationException {        String userName = authentication.getName();        if (Strings.isNullOrEmpty(userName)) {            throw new UsernameNotFoundException("请填写用户名");        }        String password = (String) authentication.getCredentials();        if(Strings.isNullOrEmpty(password)) {            throw new UsernameNotFoundException("请填写用户名");        }        //开始加载用户        CustomizeUser user = userDetailsService.loadUserByUsername(userName);        if(user.getStatus()!=1){            throw new UsernameNotFoundException("用户已被注销");        }        //取用户信息开始认证        if(!password.equals(user.getPassword())) {            throw new BadCredentialsException("用户名或密码错误");        }        return new UsernamePasswordAuthenticationToken(user, password, null);    }    @Override    public boolean supports(Class<?> aClass) {        return true;    }}